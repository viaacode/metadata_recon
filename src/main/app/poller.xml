<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:sftplite="http://www.mulesoft.org/schema/mule/sftplite" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/sftplite http://www.mulesoft.org/schema/mule/sftplite/current/mule-sftplite.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd">
    <thread-per-processor-processing-strategy name="Thread_Per_Processor_Processing_Strategy" maxThreads="25" doc:name="Thread Per Processor Processing Strategy"/>
    <flow name="pollerFlow1">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="60" timeUnit="MINUTES"/>
            <sftplite:get-folder hostName="${sftp.host}" password="${sftp.password}" path="${sftp.path}" port="${sftp.port}" userName="${sftp.user}" doc:name="Poll for files"/>
        </poll>
        <foreach doc:name="For Each">
            <flow-ref name="pollerSub_Flow" doc:name="MoveAndPostMessage"/>
        </foreach>
    </flow>
    <sub-flow name="pollerSub_Flow">
        <choice doc:name="Copy_of_Ends with extension and is not a directory?">
            <when expression="#[!payload.longname.startsWith('d') &amp;&amp; payload.filename.endsWith(&quot;.&quot; + '${sftp.allowedextension}')]">
                <logger message="Processing file: #[payload.filename]" level="INFO" doc:name="Copy_of_Logger"/>
                <set-variable variableName="originalFile" value="#[payload]" doc:name="Copy_of_Set originalFile"/>
                <sftplite:move-file destinationPath="${sftp.path}/${sftp.processingpath}/#[flowVars.originalFile.filename]" hostName="${sftp.host}" password="${sftp.password}" port="${sftp.port}" sourcePath="${sftp.path}/#[flowVars.originalFile.filename]" userName="${sftp.user}" doc:name="Copy_of_SFTPLite"/>
                <dw:transform-message doc:name="Copy_of_Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
 "cp_name": "AMSAB",
 "flow_id": "amsab.1",
 "server": p('sftp.host'),
 "username": p('sftp.user'),
 "password": p('sftp.password'),
 "timestamp": "2016-09-01T09:40:01.466+02:00",
 "sip_package": [
   {
     "file_name": flowVars.originalFile.filename,
     "file_path": p('sftp.path') ++ '/' ++ p('sftp.processingpath'),
     "file_type": "essence",
     "md5": "",
     "timestamp": "2016-09-01T09:40:01.47+02:00"
   }
 ]
}]]></dw:set-payload>
                </dw:transform-message>
                <byte-array-to-string-transformer doc:name="Copy_of_Byte Array to String"/>
                <amqp:outbound-endpoint queueName="${rabbit.queuename}" responseTimeout="10000" connector-ref="RabbitMQConnector" doc:name="Copy_of_AMQP-0-9"/>
            </when>
            <otherwise>
                <logger message="Ignoring file: #[payload.filename]" level="INFO" doc:name="Copy_of_Logger"/>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="MoveAndPostMessage" processingStrategy="Thread_Per_Processor_Processing_Strategy">
        <choice doc:name="Ends with extension and is not a directory?">
            <when expression="#[!payload.longname.startsWith('d') &amp;&amp; payload.filename.endsWith(&quot;.&quot; + '${sftp.allowedextension}')]">
                <logger message="Processing file: #[payload.filename]" level="INFO" doc:name="Logger"/>
                <set-variable variableName="originalFile" value="#[payload]" doc:name="Set originalFile"/>
                <sftplite:move-file destinationPath="${sftp.path}/${sftp.processingpath}/#[flowVars.originalFile.filename]" hostName="${sftp.host}" password="${sftp.password}" port="${sftp.port}" sourcePath="${sftp.path}/#[flowVars.originalFile.filename]" userName="${sftp.user}" doc:name="SFTPLite"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
 "cp_name": "AMSAB",
 "flow_id": "amsab.1",
 "server": p('sftp.host'),
 "username": p('sftp.user'),
 "password": p('sftp.password'),
 "timestamp": "2016-09-01T09:40:01.466+02:00",
 "sip_package": [
   {
     "file_name": flowVars.originalFile.filename,
     "file_path": p('sftp.path') ++ '/' ++ p('sftp.path') ++ '/' ++ p('sftp.processingpath'),
     "file_type": "essence",
     "md5": "",
     "timestamp": "2016-09-01T09:40:01.47+02:00"
   }
 ]
}]]></dw:set-payload>
                </dw:transform-message>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <amqp:outbound-endpoint queueName="${rabbit.queuename}" responseTimeout="10000" exchange-pattern="request-response" connector-ref="RabbitMQConnector" doc:name="AMQP-0-9"/>
            </when>
            <otherwise>
                <logger message="Ignoring file: #[payload.filename]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
</mule>
